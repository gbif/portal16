{% macro print(p, __) %}
    {% if p.type == 'and' or p.type == 'or' %}
        <ul>
            <div class="join">
                <span class="node">{$ __('downloadKey.predicate.' + p.type) $}</span>
                <span class="discreet">{$ __('downloadKey.predicate.joinDescriptions.' + p.type) $}</span>
            </div>

            {% for predicate in p.predicates %}
                <li {% if predicate.type == 'or' or predicate.type == 'and' %} class="hasChildren" {% endif %}>
                    <div class="pipe"></div>
                    {$ print(predicate, __) $}
                </li>
            {% endfor %}
        </ul>
    {% elseif p.type == 'not' %}
        <ul class="not">
            <div class="join">
                <span class="node">{$ __('downloadKey.predicate.' + p.type) $}</span>
                <span class="discreet">{$ __('downloadKey.predicate.joinDescriptions.not') $}</span>
            </div>
            <li>
                <div class="pipe"></div>
                {$ print(p.predicate, __) $}
            </li>
        </ul>
    {% elseif p.type == 'in' %}
        <div class="leaf">
            <span class="node">{$ __('filterNames.' + (p.key | toCamelCase)) $}</span>
            <ol class="inline-bullet-list">
                {% for option in p.values %}
                    <li class="node-value" tooltip-placement="top"
                                       tooltip-popup-delay="200"
                                       uib-tooltip="{$ __('downloadKey.predicate.joinDescriptions.or') $}"><span>{$ option $}</span></li>
                {% endfor %}
            </ol>
        </div>
    {% elseif p.type == 'isNotNull' %}
        <div class="leaf">
            <span class="node">{$ __('filterNames.' + (p.key | toCamelCase)) $}</span>
            <span class="node-value discreet--very">{$ __('downloadKey.predicate.isNotNull') $}</span>
        </div>
    {% elseif p.type == 'within' %}
        <div class="leaf">
            <span class="node">{$ __('filterNames.' + (p.key | toCamelCase)) $}</span>
            <span class="node-value">{$ p.geometry $}</span>
        </div>
    {% else %}
        <div class="leaf">
            <span class="node">{$ __('filterNames.' + (p.key | toCamelCase)) $}</span>
            <span class="node-value">{$ p.value $}</span>
        </div>
    {% endif %}
{% endmacro %}

