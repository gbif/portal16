{% extends ".nunjucks ./../shared/layout/html/html.nunjucks" %}
{% import "./developer.macros.nunjucks" as api %}

{% macro trowO(url, method="GET", resp="Occurrence", respLink=undefined ) %}
    {$ api.trow(url="/occurrence"+url, httpMethod=method, resp=resp, respLink=respLink, authRequired=undefined, showParams=false, paging=undefined, description=caller()) $}
{% endmacro %}

{% macro trowS(url, resp="Occurrence", respLink=undefined, paging=false, params=[], method="GET") %}
    {$ api.trow(url="/occurrence/search"+url, httpMethod="GET", resp=resp, respLink=respLink, paging=paging, params=params, authRequired=undefined, httpMethod=method, description=caller()) $}
{% endmacro %}

{% macro trowD(url, resp="", method="GET", respLink=undefined, paging=false, authRequired=false) %}
    {$ api.trow(url="/occurrence/download"+url, resp=resp, httpMethod=method, respLink=respLink, paging=paging, authRequired=authRequired, showParams=false, description=caller()) $}
{% endmacro %}

{% macro trowM(url, resp="", respLink=undefined, params=[]) %}
    {$ api.trow(url=url, resp=resp, httpMethod="GET", respLink=respLink, paging=undefined, authRequired=undefined, params=params, description=caller()) $}
{% endmacro %}

{% block page %}

    <article class="wrapper-horizontal-stripes page--developer">
        <section class="horizontal-stripe article-header white-background">
            <div class="container">
                <div class="row">
                    <header class="col-xs-12 text-center">
                        <nav class="article-header__category article-header__category--deep">
                            <span class="article-header__category__upper">Developer</span>
                            <span class="article-header__category__lower">API Docs</span>
                        </nav>
                        <h1>Occurrence API</h1>
                        <div class="article-header__intro">
                            <p>{$ apiBase $}</p>
                        </div>
                    </header>
                </div>
            </div>
        </section>

        {$ api.apiDocTabs('occurrence', __) $}

        <section id="overview" class="horizontal-stripe light-background">
            <div class="container">
                <p>
                    This API works against the GBIF Occurrence Store, which handles occurrence records and makes them
                    available through the web service and download files.
                    In addition we also provide a <a href="/developer/maps">Map API</a> that offers spatial services.
                </p>
                <p>
                    Internally we use a
                    <a href="https://github.com/gbif/occurrence/tree/master/occurrence-ws-client">Java
                        web service client</a>
                    for the consumption of these HTTP-based, RESTful web services.
                </p>
            </div>
        </section>

        <div class="submenu-wrapper horizontal-stripe white-background" id="submenuWrapper">
                <div class="col-md-2">
            {% set sections = {'occurrence':'Occurrences', 'search':'Search Occurrences', 'download':'Occurrence Downloads', 'predicates':'Download Filters', 'metrics':'Occurrence Metrics', 'inventories':'Occurrence Inventories', 'parameters':'Query Parameters'} %}
            {$ api.submenu(sections) $}
                </div>
                <div class="col-md-10">
            <section id="occurrence" class="white-background page--developer__anchor">
                <div class="container--narrow">
                    <h3>Occurrences</h3>
                    <p>This API provides services related to the retrieval of single occurrence records.</p>
                    <table class='api table table-bordered table-striped table-params'>
                        {$ api.apiTableHead(auth=false, paging=false, params=false) $}
                        <tbody>
                        {% call trowO(url="/{key}", respLink=apiBase+"occurrence/1258202889") %}
                        Gets details for a single, interpreted occurrence
                        {% endcall %}

                        {% call trowO(url="/{key}/fragment", respLink=apiBase+"occurrence/1258202889/fragment") %}
                        Get a single occurrence fragment in its raw form (xml or json)
                        {% endcall %}

                        {% call trowO(url="/{key}/verbatim", resp="VerbatimOccurrence", respLink=apiBase+"occurrence/1258202889/verbatim") %}
                        Gets the verbatim occurrence record without any interpretation
                        {% endcall %}
                        </tbody>
                    </table>
                </div>
            </section>

            <section id="search" class="white-background page--developer__anchor">
                <div class="container--narrow">
                    <h3>Searching</h3>
                    <p>This API provides services for searching occurrence records that have been indexed by GBIF.
                        In order to retrieve all results for a given search filter you need to issue individual requests
                        for each page,
                        which is limited to a maximum size of 300 records per page.

                        Note that for technical reasons we also have a hard limit for any query of 200,000 records.
                        You will get an error if the offset + limit exceeds 200,000.
                        To retrieve all records beyond 200,000 you should use our asynchronous <a href="#download">download
                            service</a> instead.
                    </p>

                    <p>
                        <em>Please be aware that the following parameters are in a experimental phase and its definition
                            could change in the future: q, facet, facetOffset, facetLimit, facetMincount and
                            facetMultiselect</em>
                    </p>

                    <table class='api table table-bordered table-striped table-params'>
                        {$ api.apiTableHead(auth=false) $}
                        <tbody>
                        {% call trowS(url="", respLink=apiBase+"occurrence/search?taxonKey=1", paging=true, params=["q","basisOfRecord","catalogNumber","collectionCode","continent","country","datasetKey","decimalLatitude","decimalLongitude","depth","elevation","eventDate","geometry","hasCoordinate","hasGeospatialIssue","institutionCode","issue","lastInterpreted","mediaType","month","occurrenceId","organismId","protocol","license","publishingCountry","publishingOrg","crawlId","recordedBy","recordNumber","scientificName","locality","stateProvince","waterBody","taxonKey","kingdomKey","phylumKey","classKey","orderKey","familyKey","genusKey","subGenusKey","speciesKey","year","establishmentMeans","repatriated","typeStatus","facet","facetMincount","facetMultiselect", "facet, paging"]) %}
                        Full search across all occurrences.
                        Results are ordered by relevance.
                        {% endcall %}

                        {% call trowS(url="/catalogNumber", respLink=apiBase+"occurrence/search/catalogNumber?q=122&amp;limit=5", params=["q","limit"]) %}
                        Search that returns matching catalog numbers.
                        Results are ordered by relevance.
                        {% endcall %}

                        {% call trowS(url="/collectionCode", respLink=apiBase+"occurrence/search/collectionCode?q=12&amp;limit=5", params=["q","limit"]) %}
                        Search that returns matching collection codes.
                        Results are ordered by relevance.
                        {% endcall %}

                        {% call trowS(url="/occurrenceId", respLink=apiBase+"occurrence/search/occurrenceId?q=1234&amp;limit=5", params=["q","limit"]) %}
                        Search that returns matching occurrence identifiers.
                        Results are ordered by relevance.
                        {% endcall %}

                        {% call trowS(url="/recordedBy", respLink=apiBase+"occurrence/search/recordedBy?q=juan&amp;limit=5", params=["q","limit"]) %}
                        Search that returns matching collector names.
                        Results are ordered by relevance.
                        {% endcall %}

                        {% call trowS(url="/recordNumber", respLink=apiBase+"occurrence/search/recordNumber?q=1&amp;limit=5", params=["q","limit"]) %}
                        Search that returns matching record numbers.
                        Results are ordered by relevance.
                        {% endcall %}

                        {% call trowS(url="/institutionCode", respLink=apiBase+"occurrence/search/institutionCode?q=GB&amp;limit=5", params=["q","limit"]) %}
                        Search that returns matching institution codes.
                        Results are ordered by relevance.
                        {% endcall %}
                        </tbody>
                    </table>
                </div>
            </section>

            <section id="download" class="white-background page--developer__anchor">
                <div class="container--narrow">
                    <h3>Occurrence Downloads</h3>
                    <p>This API provides services to download occurrence records and retrieve information about those
                        downloads.</p>
                    <p>Occurrence downloads are created asynchronously â€” the user requests a download and, once
                        complete, is sent an email with a link to the resulting file.</p>
                    <p>It is necessary to register as a user of the website to create a download request, and use HTTP authentication
                        using the username (not the email) and password.</p>
                    <p>Internally we use a Java web service client for the consumption of these HTTP-based, RESTful web
                        services. It may
                        be of interest to those coding against the API, and can be found in the <a
                                href="https://github.com/gbif/occurrence/tree/master/occurrence-ws-client"
                                >occurrence-download-ws-client</a>.
                    </p>
                    <table class='api table table-bordered table-striped table-params'>
                        {$ api.apiTableHead(params=false) $}
                        <tbody>


                        {% call trowD(url="/request", resp="Download key", method="POST", authRequired=true) %}
                        Starts the process of creating a download file.
                        See the <a href="#predicates">predicates</a> section to consult the requests accepted by this
                        service
                        and the <a href="#download_limits">limits</a> section to refer for information of how this
                        service is limited per user.
                        {% endcall %}

                        {% call trowD(url="/request/{key}", resp="Download file", respLink=apiBase+"occurrence/download/request/0000251-150304104939900", method="GET", authRequired=false) %}
                        Retrieves the download file if it is available.
                        {% endcall %}

                        {% call trowD(url="/request/{key}", method="DELETE", authRequired=true) %}
                        Cancels the download process.
                        {% endcall %}

                        {% call trowD(url="", method="GET", resp="Download Page", authRequired=true, paging=true) %}
                        Lists all the downloads. This operation can be executed by the role ADMIN only.
                        {% endcall %}

                        {% call trowD(url="/{key}", resp="Download", respLink=apiBase+"occurrence/download/0000251-150304104939900", method="GET") %}
                        Retrieves the occurrence download metadata by its unique key.
                        {% endcall %}

                        {% call trowD(url="/{key}", method="PUT", authRequired=true) %}
                        Updates the status of an existing occurrence download. This operation can be executed by the
                        role ADMIN only.
                        {% endcall %}

                        {% call trowD(url="/{key}", method="POST", authRequired=true) %}
                        Creates the metadata about an occurrence download. This operation can be executed by the role
                        ADMIN only.
                        {% endcall %}

                        {% call trowD(url="/{key}/datasets", method="GET", authRequired=false, paging=true, resp="Datasets", respLink=apiBase+"occurrence/download/0000251-150304104939900/datasets") %}
                        Lists all the datasets of an occurrence download.
                        {% endcall %}

                        {% call trowD(url="/user/{user}", method="GET", resp="Download Page", authRequired=true, paging=true) %}
                        Lists the downloads created by a user. Only role ADMIN can list downloads of other users.
                        {% endcall %}

                        {% call trowD(url="/dataset/{datasetKey}", method="GET", resp="Downloads list", authRequired=true, paging=true, respLink=apiBase+"occurrence/download/dataset/7f2edc10-f762-11e1-a439-00145eb45e9a") %}
                        Lists the downloads activity of dataset.
                        {% endcall %}
                        </tbody>
                    </table>
                </div>
            </section>

            <section id="metrics" class="white-background page--developer__anchor">
                <div class="container--narrow ">
                    <h3>Occurrence Metrics</h3>
                    <p>This API provides services to retrieve various counts and metrics provided about occurrence
                        records.
                        The kind of counts that are currently supported are listed by the schema, method, see below for
                        details.
                    </p>
                    <table class='api table table-bordered table-striped table-params'>
                        {$ api.apiTableHead(auth=false, paging=false) $}
                        <tbody>
                        {% call trowM(url="/occurrence/count", resp="Count", respLink=apiBase+"occurrence/count") %}
                        Returns occurrence counts for a predefined set of dimensions.
                        The supported dimensions are enumerated in the <a href="{$ apiBase $}occurrence/count/schema"
                                                                          >/occurrence/count/schema</a>
                        service.
                        An example for the count of georeferenced observations from Canada: <a
                                href="{$ apiBase $}occurrence/count?country=CA&amp;isGeoreferenced=true&amp;basisOfRecord=OBSERVATION"
                                >/occurrence/count?country=CA&amp;isGeoreferenced=true&amp;basisOfRecord=OBSERVATION</a>.
                        {% endcall %}

                        {% call trowM(url="/occurrence/count/schema", resp="Count", respLink=apiBase+"occurrence/count/schema") %}
                        List the supported metrics by the service.
                        {% endcall %}
                        </tbody>
                    </table>
                </div>
            </section>

            <section id="inventories" class="white-background page--developer__anchor">
                <div class="container--narrow">
                    <h3>Occurrence Inventories</h3>
                    <p>This API provides services that list all distinct values together with their occurrence count for
                        a given occurrence property.
                        Only a few properties are supported, each with its own service to call.
                    </p>
                    <table class='api table table-bordered table-striped table-params'>
                        {$ api.apiTableHead(auth=false, paging=false) $}
                        <tbody>
                        {% call trowM(url="/occurrence/counts/basisOfRecord", resp="Counts", respLink=apiBase+"occurrence/counts/basisOfRecord") %}
                        Lists occurrence counts by basis of record.
                        {% endcall %}

                        {% call trowM(url="/occurrence/counts/year", resp="Counts", respLink=apiBase+"occurrence/counts/year?year=1981,2012", params=["year"]) %}
                        Lists occurrence counts by year.
                        {% endcall %}

                        {% call trowM(url="/occurrence/counts/datasets", resp="Counts", respLink=apiBase+"occurrence/counts/datasets?country=DE", params=["country","nubKey"]) %}
                        Lists occurrence counts for datasets that cover a given taxon or country.
                        {% endcall %}

                        {% call trowM(url="/occurrence/counts/countries", resp="Counts", respLink=apiBase+"occurrence/counts/countries?publishingCountry=DE", params=["publishingCountry"]) %}
                        Lists occurrence counts for all countries covered by the data published by the given country.
                        {% endcall %}

                        {% call trowM(url="/occurrence/counts/publishingCountry", resp="Counts", respLink=apiBase+"occurrence/counts/publishingCountries?country=DE", params=["country"]) %}
                        Lists occurrence counts for all countries that publish data about the given country.
                        {% endcall %}
                        </tbody>
                    </table>
                </div>
            </section>

            {$ api.paramArticle(apiName="Occurrence", addSearchParams=true, apiBase=apiBase, params={
            "datasetKey": "The occurrence dataset key (a uuid).",
            "year": "The 4 digit year. A year of 98 will be interpreted as AD 98. Supports <a
                    href='/developer/summary#common'>range queries</a>.",
            "month": "The month of the year, starting with 1 for January. Supports <a href='/developer/summary#common'>range
                queries</a>.",
            "eventDate": "Occurrence date in ISO 8601 format: yyyy, yyyy-MM, yyyy-MM-dd, or MM-dd. Supports <a
                    href='/developer/summary#common'>range queries</a>.",
            "lastInterpreted": "This date the record was last modified in GBIF, in ISO 8601 format: yyyy, yyyy-MM,
            yyyy-MM-dd, or MM-dd. Supports <a href='/developer/summary#common'>range queries</a>.",
            "decimalLatitude": "Latitude in decimals between -90 and 90 based on WGS 84.. Supports <a
                    href='/developer/summary#common'>range queries</a>.",
            "decimalLongitude": "Longitude in decimals between -180 and 180 based on WGS 84.. Supports <a
                    href='/developer/summary#common'>range queries</a>.",
            "country": "The 2-letter country code (as per <a
                    href='http://www.iso.org/iso/country_codes/iso_3166_code_lists/country_names_and_code_elements.htm'
                   >ISO-3166-1</a>) of the country in which the occurrence was recorded.",
            "continent": "Continent, as defined in our <a href='"+apidocs+"/vocabulary/Continent.html'>Continent
                enum</a>",
            "nubKey": "A taxon key from the GBIF backbone.",
            "publishingCountry" : "The 2-letter country code (as per <a
                    href='http://www.iso.org/iso/country_codes/iso_3166_code_lists/country_names_and_code_elements.htm'
                   >ISO-3166-1</a>) of the owining organization's country.",
            "publishingOrg": "The publishing organization key (a uuid).",
            "crawlId": "Crawl attempt that harvested this record.",
            "elevation": "Elevation (altitude) in meters above sea level. Supports <a href='/developer/summary#common'>range
                queries</a>.",
            "depth" : "Depth in meters relative to altitude. For example 10 meters below a lake surface with given
            altitude. Supports <a href='/developer/summary#common'>range queries</a>.",
            "establishmentMeans": "EstablishmentMeans, as defined in our <a
                    href='"+apidocs+"/vocabulary/EstablishmentMeans.html'>EstablishmentMeans enum</a>",
            "occurrenceID" : "A single globally unique identifier for the occurrence record as provided by the
            publisher.",
            "organismId": "An identifier for the Organism instance (as opposed to a particular digital record of the
            Organism). May be a globally unique identifier or an identifier specific to the data set.",
            "institutionCode" : "An identifier of any form assigned by the source to identify the institution the record
            belongs to. Not guaranteed to be unique.",
            "collectionCode": "An identifier of any form assigned by the source to identify the physical collection or
            digital dataset uniquely within the context of an institution.",
            "catalogNumber": "An identifier of any form assigned by the source within a physical collection or digital
            dataset for the record which may not be unique, but should be fairly unique in combination with the
            institution and collection code.",
            "recordedBy": "The person who recorded the occurrence.",
            "recordNumber": "An identifier given to the record at the time it was recorded in the field.",
            "basisOfRecord": "Basis of record, as defined in our <a href='"+apidocs+"/vocabulary/BasisOfRecord.html'
                                                                   >BasisOfRecord enum</a>",
            "protocol":"Protocol or mechanism used to provide the occurrence record.",
            "license": "The type license applied to the dataset or record.",
            "locality": "The specific description of the place.",
            "waterBody": "The name of the water body in which the Locations occurs. ",
            "stateProvince":"he name of the next smaller administrative region than country (state, province, canton,
            department, region, etc.) in which the Location occurs.",
            "taxonKey": "A taxon key from the GBIF backbone. All included and synonym taxa are included in the search,
            so a search for aves with taxonKey=212 (i.e. <a href='"+apiBase+"occurrence/search?taxonKey=212'
                                                           >/occurrence/search?taxonKey=212</a>) will
            match all birds, no matter which species.",
            "scientificName": "A scientific name from the <a href='/dataset/d7dddbf4-2cf0-4f39-9b2a-bb099caae36c'>GBIF
                backbone</a>. All included and synonym taxa are included in the search. Under the hood a call to the <a
                    href='/developer/species#searching'>species match service</a> is done first to retrieve a taxonKey.
            Only unique scientific names will return results, homonyms (many monomials) return nothing! Consider to use
            the taxonKey parameter instead and the species match service directly",
            "hasCoordinate": "Limits searches to occurrence records which contain a value in both latitude and longitude
            (i.e. hasCoordinate=true limits to occurrence records with coordinate values and hasCoordinate=false limits
            to occurrence records without coordinate values).",
            "geometry": "Searches for occurrences inside a polygon described in Well Known Text (WKT) format. Only
            POINT, LINESTRING, LINEARRING, POLYGON and MULTIPOLYGON are accepted WKT types. For example, a shape written
            as POLYGON ((30.1 10.1, 40 40, 20 40, 10 20, 30.1 10.1)) would be queried as is, i.e. <a
                    href='"+apiBase+"/occurrence/search?geometry=POLYGON((30.1 10.1, 40 40, 20 40, 10 20, 30.1 10.1))'
                   >/occurrence/search?geometry=POLYGON((30.1 10.1, 40 40, 20 40, 10 20, 30.1 10.1))</a>.
            <em>Polygons must have <strong>anticlockwise</strong> ordering of points</em>, or will give unpredictable results.
            (A clockwise polygon represents the opposite area: the Earth's surface with a 'hole' in it. Such queries
            are not supported.)",
            "hasGeospatialIssue": "Includes/excludes occurrence records which contain spatial issues (as determined in
            our record interpretation), i.e. hasGeospatialIssue=true returns only those records with spatial issues
            while hasGeospatialIssue=false includes only records without spatial issues. The absence of this parameter
            returns any record with or without spatial issues.",
            "issue": "A specific interpretation issue as defined in our <a
                    href='"+apidocs+"/vocabulary/OccurrenceIssue.html'>OccurrenceIssue enum</a>",
            "mediaType": "The kind of multimedia associated with an occurrence as defined in our <a
                    href='"+apidocs+"/vocabulary/MediaType.html'>MediaType enum</a>",
            "typeStatus": "Nomenclatural type (type status, typified scientific name, publication) applied to the
            subject.",
            "kingdomKey": "Kingdom classification key.",
            "phylumKey": "Phylum classification key.",
            "classKey": "Class classification key.",
            "orderKey": "Order classification key.",
            "familyKey": "Family classification key.",
            "genusKey": "Genus classification key.",
            "subgenusKey": "Subgenus classification key.",
            "speciesKey": "Species classification key.",
            "repatriated": "Searches for records whose publishing country is different to the country where the record
            was recorded in.",
            "q" : "Simple search parameter. The value for this parameter can be a simple word or a phrase.",
            "limit": "The maximum number of results to return. This can't be greater than 300, any value greater is set
            to 300.",
            "facet": "A list of facet names used to retrieve the most frequent values for a field. Facets are allowed
            for all the parameters except for: last interpreted date, event date and geometry",
            "facet, paging": "All facets parameters allow, paging requests using the parameters <em>facetOffset</em> and
            <em>facetLimit</em> as this example <a
                    href='"+apiBase+"occurrence/search?facet=datasetKey&datasetKey.facetLimit=5&datasetKey.facetOffset=10&limit=0'>occurrence/search?facet=datasetKey&amp;datasetKey.facetLimit=5&amp;datasetKey.facetOffset=10&amp;limit=0</a>"
            }) $}

            <section id="predicates" class="white-background page--developer__anchor">
                <div class="container--narrow">
                    <h3>Occurrence Download Predicates</h3>
                    <p>A download predicate is an query expression to retrieve occurrence record downloads. A working example using Curl: Put this in a file called query.json:
                        {% set downloadExampleQuery = {"creator":"userName","notification_address":["userEmail@example.org"],"sendNotification": true,"format":"SIMPLE_CSV","predicate":{"type":"and","predicates":[{"type":"equals","key":"BASIS_OF_RECORD","value":"LITERATURE"},{"type":"equals","key":"COUNTRY","value":"KW"}]}} %}
<pre><code>{$ downloadExampleQuery | rawJson(true) | safe $}</code></pre>

                    </p>
                    <p>
                        Then issue:
                    <pre><code style="white-space: nowrap">curl --include --user userName:PASSWORD --header "Content-Type: application/json" --data @query.json {$ apiBase $}occurrence/download/request</code></pre>
                    </p>
                    <p>
                        A download ID is returned. This gives the status, and once ready, the download link:
                        <pre><code style="white-space: nowrap">curl -Ss {$ apiBase $}occurrence/download/0000022-170829143010713 | jq .</code></pre>
                        (<code>| jq .</code> is optional, but formats the JSON nicely.)
                    </p>

                    <p>
                        It's also possible to format the Curl request without an external query file:
                        <pre><code>curl --include --user userName:PASSWORD --header "Content-Type: application/json" --data '{"creator": "userName","notification_address": ["userEmail@example.org"],"format": "SIMPLE_CSV","predicate": {"type": "in","key": "COUNTRY","values": ["FJ","TO"]}}' {$ apiBase $}occurrence/download/request</code></pre>
                    </p>

                    <p>The table below lists the supported predicates that can be combined to build download requests
                        that can be POSTed to the <a href="#download">download API</a>.
                    </p>

                    <table class='table table-bordered table-striped table-params'>
                        <thead>
                        <tr>
                            <th width="10%" class='total'>Predicate</th>
                            <th width="30%" class='total'>Description</th>
                            <th width="60%">Example</th>
                        </tr>
                        </thead>

                        <tbody>
                        <tr>
                            <td>equals</td>
                            <td>equality comparison</td>
                            <td>
                                <code class="block">
                                    {<br/>
                                    &nbsp;&nbsp;"creator":"userName",<br/>
                                    &nbsp;&nbsp;"notification_address": ["userName@example.org"],<br/>
                                    &nbsp;&nbsp;"predicate":<br/>
                                    &nbsp;&nbsp;{<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;"type":"equals",<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;"key":"BASIS_OF_RECORD",<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;"value":"LITERATURE"<br/>
                                    &nbsp;&nbsp;}<br/>
                                    }<br/>
                                </code>
                                or
                                <code class="block">
                                    {<br/>
                                    &nbsp;&nbsp;"creator":"userName",<br/>
                                    &nbsp;&nbsp;"notification_address": ["userName@example.org"],<br/>
                                    &nbsp;&nbsp;"predicate":<br/>
                                    &nbsp;&nbsp;{<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;"type":"equals",<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;"key":"HAS_COORDINATE",<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;"value":"true"<br/>
                                    &nbsp;&nbsp;}<br/>
                                    }<br/>
                                </code>
                            </td>
                        </tr>
                        <tr>
                            <td>and</td>
                            <td>logical AND(conjuction)</td>
                            <td>
                                <code class="block">
                                    {<br/>
                                    &nbsp;&nbsp;"creator":"userName",<br/>
                                    &nbsp;&nbsp;"notification_address": ["userName@example.org"],<br/>
                                    &nbsp;&nbsp;"predicate":<br/>
                                    &nbsp;&nbsp;{<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;"type":"and",<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;"predicates":
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[{"type":"equals","key":"HAS_GEOSPATIAL_ISSUE","value":"false"},<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"type":"equals","key":"TAXON_KEY","value":"2440447"}]<br/>
                                    &nbsp;&nbsp;}<br/>
                                    }<br/>
                                </code>
                            </td>
                        </tr>
                        <tr>
                            <td>or</td>
                            <td>logical OR(disjunction)</td>
                            <td>
                                <code class="block">
                                    {<br/>
                                    &nbsp;&nbsp;"creator":"userName",<br/>
                                    &nbsp;&nbsp;"notification_address": ["userName@example.org"],<br/>
                                    &nbsp;&nbsp;"predicate":<br/>
                                    &nbsp;&nbsp;{<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;"type":"or",<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;"predicates":
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[{"type":"equals","key":"HAS_GEOSPATIAL_ISSUE","value":"false"},<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"type":"equals","key":"TAXON_KEY","value":"2440447"}]<br/>
                                    &nbsp;&nbsp;}<br/>
                                    }<br/>
                                </code>
                            </td>
                        </tr>
                        <tr>
                            <td>lessThan</td>
                            <td>is less than</td>
                            <td>
                                <code class="block">
                                    {<br/>
                                    &nbsp;&nbsp;"creator":"userName",<br/>
                                    &nbsp;&nbsp;"notification_address": ["userName@example.org"],<br/>
                                    &nbsp;&nbsp;"predicate":<br/>
                                    &nbsp;&nbsp;{<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;"type":"lessThan",<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;"key":"YEAR",<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;"value":"1900"<br/>
                                    &nbsp;&nbsp;}<br/>
                                    }<br/>
                                </code>
                            </td>
                        </tr>
                        <tr>
                            <td>lessThanOrEquals</td>
                            <td>is less than or equals</td>
                            <td>
                                <code class="block">
                                    {<br/>
                                    &nbsp;&nbsp;"creator":"userName",<br/>
                                    &nbsp;&nbsp;"notification_address": ["userName@example.org"],<br/>
                                    &nbsp;&nbsp;"predicate":<br/>
                                    &nbsp;&nbsp;{<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;"type":"lessThanOrEquals",<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;"key":"ALTITUDE",<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;"value":"1000"<br/>
                                    &nbsp;&nbsp;}<br/>
                                    }<br/>
                                </code>
                            </td>
                        </tr>
                        <tr>
                            <td>greaterThan</td>
                            <td>is greater than</td>
                            <td>
                                <code class="block">
                                    {<br/>
                                    &nbsp;&nbsp;"creator":"userName",<br/>
                                    &nbsp;&nbsp;"notification_address": ["userName@example.org"],<br/>
                                    &nbsp;&nbsp;"predicate":<br/>
                                    &nbsp;&nbsp;{<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;"type":"greaterThan",<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;"key":"YEAR",<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;"value":"1900"<br/>
                                    &nbsp;&nbsp;}<br/>
                                    }<br/>
                                </code>
                            </td>
                        </tr>
                        <tr>
                            <td>greaterThanOrEquals</td>
                            <td>is greater than or equals</td>
                            <td>
                                <code class="block">
                                    {<br/>
                                    &nbsp;&nbsp;"creator":"userName",<br/>
                                    &nbsp;&nbsp;"notification_address": ["userName@example.org"],<br/>
                                    &nbsp;&nbsp;"predicate":<br/>
                                    &nbsp;&nbsp;{<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;"type":"greaterThanOrEquals",<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;"key":"ALTITUDE",<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;"value":"1000"<br/>
                                    &nbsp;&nbsp;}<br/>
                                    }<br/>
                                </code>
                            </td>
                        </tr>
                        <tr>
                            <td>in</td>
                            <td>specify multiple values to be compared</td>
                            <td>
                                <code class="block">
                                    {<br/>
                                    &nbsp;&nbsp;"creator":"userName",<br/>
                                    &nbsp;&nbsp;"notification_address": ["userName@example.org"],<br/>
                                    &nbsp;&nbsp;"predicate":<br/>
                                    &nbsp;&nbsp;{<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;"type":"in",<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;"key":"CATALOG_NUMBER",<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;"values":["cat1","cat2","cat3"]<br/>
                                    &nbsp;&nbsp;}<br/>
                                    }<br/>
                                </code>
                            </td>
                        </tr>
                        <tr>
                            <td>within</td>
                            <td>geospatial predicate that checks if the coordinates are inside a POLYGON</td>
                            <td>
                                <code class="block">
                                    {<br/>
                                    &nbsp;&nbsp;"creator":"userName",<br/>
                                    &nbsp;&nbsp;"notification_address": ["userName@example.org"],<br/>
                                    &nbsp;&nbsp;"predicate":<br/>
                                    &nbsp;&nbsp;{<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;"type":"within",<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;"geometry":"POLYGON((-130.78125 51.179342,<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-130.78125
                                    22.593726,-62.578125 22.593726,<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-62.578125
                                    51.179342,-130.78125 51.179342))"<br/>
                                    &nbsp;&nbsp;}<br/>
                                    }<br/>
                                </code>
                            </td>
                        </tr>
                        <tr>
                            <td>not</td>
                            <td>logical negation</td>
                            <td>
                                <code class="block">
                                    {<br/>
                                    &nbsp;&nbsp;"creator":"userName",<br/>
                                    &nbsp;&nbsp;"notification_address": ["userName@example.org"],<br/>
                                    &nbsp;&nbsp;"predicate":<br/>
                                    &nbsp;&nbsp;{<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;"type":"not",<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"predicate":<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"type":"equals",<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"key":"CATALOG_NUMBER",<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"value":"cat1"<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
                                    &nbsp;&nbsp;}<br/>
                                    }<br/>
                                </code>
                            </td>
                        </tr>
                        <tr>
                            <td>like</td>
                            <td>search for a pattern</td>
                            <td>
                                <code class="block">
                                    {<br/>
                                    &nbsp;&nbsp;"creator":"userName",<br/>
                                    &nbsp;&nbsp;"notification_address": ["userName@example.org"],<br/>
                                    &nbsp;&nbsp;"predicate":<br/>
                                    &nbsp;&nbsp;{<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;"type":"like",<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;"key":"CATALOG_NUMBER",<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;"value":"PAPS5-560%"<br/>
                                    &nbsp;&nbsp;}<br/>
                                    }<br/>
                                </code>
                            </td>
                        </tr>
                        <tr>
                            <td>isNotNull</td>
                            <td>has a non-empty value</td>
                            <td>
                                <code class="block">
                                    {<br/>
                                    &nbsp;&nbsp;"creator":"userName",<br/>
                                    &nbsp;&nbsp;"notification_address": ["userName@example.org"],<br/>
                                    &nbsp;&nbsp;"predicate":<br/>
                                    &nbsp;&nbsp;{<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;"type":"isNotNull",<br/>
                                    &nbsp;&nbsp;&nbsp;&nbsp;"parameter":"ISSUE"<br/>
                                    &nbsp;&nbsp;}<br/>
                                    }<br/>
                                </code>
                            </td>
                        </tr>
                        </tbody>
                    </table>

                </div>
            </section>

            <section id="download_limits" class="white-background page--developer__anchor">
                <div class="container--narrow">
                    <h3>Occurrence Download Limits</h3>
                    <p>Occurrence downloads is a very resource demanding service which needs to be monitored and limited
                        according to the GBIF platform load.
                        In order to avoid that downloads requested by a single user utilize most of the resources two
                        rules have been set:</p>
                    <ul style="margin-left: 20px !important;">
                        <li>If the total number of downloads is less than <b style="font-weight: bold;">100</b> any
                            given user can have no more than <b style="font-weight: bold;">3</b> downloads
                            simultaneously.
                        </li>
                        <li>If the total number of downloads is less than <b style="font-weight: bold;">1000</b> any
                            given user can only have <b style="font-weight: bold;">1</b> download.
                        </li>
                    </ul>
                </div>
            </section>

        </div>
            </div>
        </div>

    </article>

{% endblock %}
